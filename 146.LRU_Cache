class LRUCache {
    Map<Integer,Integer>map;
    Map<Integer,Integer>arr;
    int timer = 1;
    int cap = -1;
    public LRUCache(int capacity) {
        map = new LinkedHashMap<>(capacity);
        arr = new LinkedHashMap<>(capacity);
        cap = capacity;
    }
    
    public int get(int key) {
        if(!map.containsKey(key))
        {
            return -1;
        }
        int ans = map.get(key);
        timer++;
        arr.put(key,timer);
        return ans;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key))
        {
            map.put(key,value);
            timer++;
            arr.put(key,timer);
           return ;
        }
        int val = Integer.MAX_VALUE;
        int ans = -1;
        if(map.size()>=cap)
        {
            for(Map.Entry<Integer,Integer>entry : arr.entrySet())
            {
                if(entry.getValue()<val)
                {
                    val = entry.getValue();
                    ans = entry.getKey();
                }
            }

            map.remove(ans);
            arr.remove(ans);

            timer++;

            map.put(key,value);
            arr.put(key,timer);
        }
        else
        {
            timer++;
            map.put(key,value);
            arr.put(key,timer);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
